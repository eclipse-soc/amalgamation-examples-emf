/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package droid.provider;

import droid.util.DroidAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DroidItemProviderAdapterFactory extends DroidAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DroidItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.Application} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationItemProvider applicationItemProvider;

	/**
	 * This creates an adapter for a {@link droid.Application}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationAdapter() {
		if (applicationItemProvider == null) {
			applicationItemProvider = new ApplicationItemProvider(this);
		}

		return applicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.ApplicationUsesSDK} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationUsesSDKItemProvider applicationUsesSDKItemProvider;

	/**
	 * This creates an adapter for a {@link droid.ApplicationUsesSDK}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationUsesSDKAdapter() {
		if (applicationUsesSDKItemProvider == null) {
			applicationUsesSDKItemProvider = new ApplicationUsesSDKItemProvider(this);
		}

		return applicationUsesSDKItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.Screen} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScreenItemProvider screenItemProvider;

	/**
	 * This creates an adapter for a {@link droid.Screen}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScreenAdapter() {
		if (screenItemProvider == null) {
			screenItemProvider = new ScreenItemProvider(this);
		}

		return screenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.Action} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a {@link droid.Action}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.GoToURLAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoToURLActionItemProvider goToURLActionItemProvider;

	/**
	 * This creates an adapter for a {@link droid.GoToURLAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoToURLActionAdapter() {
		if (goToURLActionItemProvider == null) {
			goToURLActionItemProvider = new GoToURLActionItemProvider(this);
		}

		return goToURLActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.ShowLayoutAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShowLayoutActionItemProvider showLayoutActionItemProvider;

	/**
	 * This creates an adapter for a {@link droid.ShowLayoutAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShowLayoutActionAdapter() {
		if (showLayoutActionItemProvider == null) {
			showLayoutActionItemProvider = new ShowLayoutActionItemProvider(this);
		}

		return showLayoutActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.InvokeScreenAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InvokeScreenActionItemProvider invokeScreenActionItemProvider;

	/**
	 * This creates an adapter for a {@link droid.InvokeScreenAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInvokeScreenActionAdapter() {
		if (invokeScreenActionItemProvider == null) {
			invokeScreenActionItemProvider = new InvokeScreenActionItemProvider(this);
		}

		return invokeScreenActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.Layout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayoutItemProvider layoutItemProvider;

	/**
	 * This creates an adapter for a {@link droid.Layout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayoutAdapter() {
		if (layoutItemProvider == null) {
			layoutItemProvider = new LayoutItemProvider(this);
		}

		return layoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.ViewCollection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewCollectionItemProvider viewCollectionItemProvider;

	/**
	 * This creates an adapter for a {@link droid.ViewCollection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewCollectionAdapter() {
		if (viewCollectionItemProvider == null) {
			viewCollectionItemProvider = new ViewCollectionItemProvider(this);
		}

		return viewCollectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.View} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewItemProvider viewItemProvider;

	/**
	 * This creates an adapter for a {@link droid.View}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewAdapter() {
		if (viewItemProvider == null) {
			viewItemProvider = new ViewItemProvider(this);
		}

		return viewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.Widget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WidgetItemProvider widgetItemProvider;

	/**
	 * This creates an adapter for a {@link droid.Widget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWidgetAdapter() {
		if (widgetItemProvider == null) {
			widgetItemProvider = new WidgetItemProvider(this);
		}

		return widgetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.TextView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextViewItemProvider textViewItemProvider;

	/**
	 * This creates an adapter for a {@link droid.TextView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextViewAdapter() {
		if (textViewItemProvider == null) {
			textViewItemProvider = new TextViewItemProvider(this);
		}

		return textViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.Button} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonItemProvider buttonItemProvider;

	/**
	 * This creates an adapter for a {@link droid.Button}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonAdapter() {
		if (buttonItemProvider == null) {
			buttonItemProvider = new ButtonItemProvider(this);
		}

		return buttonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.ImageView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImageViewItemProvider imageViewItemProvider;

	/**
	 * This creates an adapter for a {@link droid.ImageView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImageViewAdapter() {
		if (imageViewItemProvider == null) {
			imageViewItemProvider = new ImageViewItemProvider(this);
		}

		return imageViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.Spinner} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpinnerItemProvider spinnerItemProvider;

	/**
	 * This creates an adapter for a {@link droid.Spinner}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpinnerAdapter() {
		if (spinnerItemProvider == null) {
			spinnerItemProvider = new SpinnerItemProvider(this);
		}

		return spinnerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.EditText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EditTextItemProvider editTextItemProvider;

	/**
	 * This creates an adapter for a {@link droid.EditText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEditTextAdapter() {
		if (editTextItemProvider == null) {
			editTextItemProvider = new EditTextItemProvider(this);
		}

		return editTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.Resource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceItemProvider resourceItemProvider;

	/**
	 * This creates an adapter for a {@link droid.Resource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceAdapter() {
		if (resourceItemProvider == null) {
			resourceItemProvider = new ResourceItemProvider(this);
		}

		return resourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.StringResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringResourceItemProvider stringResourceItemProvider;

	/**
	 * This creates an adapter for a {@link droid.StringResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringResourceAdapter() {
		if (stringResourceItemProvider == null) {
			stringResourceItemProvider = new StringResourceItemProvider(this);
		}

		return stringResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.IntegerResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerResourceItemProvider integerResourceItemProvider;

	/**
	 * This creates an adapter for a {@link droid.IntegerResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerResourceAdapter() {
		if (integerResourceItemProvider == null) {
			integerResourceItemProvider = new IntegerResourceItemProvider(this);
		}

		return integerResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.BooleanResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanResourceItemProvider booleanResourceItemProvider;

	/**
	 * This creates an adapter for a {@link droid.BooleanResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanResourceAdapter() {
		if (booleanResourceItemProvider == null) {
			booleanResourceItemProvider = new BooleanResourceItemProvider(this);
		}

		return booleanResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.ColorResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColorResourceItemProvider colorResourceItemProvider;

	/**
	 * This creates an adapter for a {@link droid.ColorResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColorResourceAdapter() {
		if (colorResourceItemProvider == null) {
			colorResourceItemProvider = new ColorResourceItemProvider(this);
		}

		return colorResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.DimensionResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DimensionResourceItemProvider dimensionResourceItemProvider;

	/**
	 * This creates an adapter for a {@link droid.DimensionResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDimensionResourceAdapter() {
		if (dimensionResourceItemProvider == null) {
			dimensionResourceItemProvider = new DimensionResourceItemProvider(this);
		}

		return dimensionResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.ArrayResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayResourceItemProvider arrayResourceItemProvider;

	/**
	 * This creates an adapter for a {@link droid.ArrayResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayResourceAdapter() {
		if (arrayResourceItemProvider == null) {
			arrayResourceItemProvider = new ArrayResourceItemProvider(this);
		}

		return arrayResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.IntegerArrayResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerArrayResourceItemProvider integerArrayResourceItemProvider;

	/**
	 * This creates an adapter for a {@link droid.IntegerArrayResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerArrayResourceAdapter() {
		if (integerArrayResourceItemProvider == null) {
			integerArrayResourceItemProvider = new IntegerArrayResourceItemProvider(this);
		}

		return integerArrayResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.StringArrayResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringArrayResourceItemProvider stringArrayResourceItemProvider;

	/**
	 * This creates an adapter for a {@link droid.StringArrayResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringArrayResourceAdapter() {
		if (stringArrayResourceItemProvider == null) {
			stringArrayResourceItemProvider = new StringArrayResourceItemProvider(this);
		}

		return stringArrayResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.DrawableResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DrawableResourceItemProvider drawableResourceItemProvider;

	/**
	 * This creates an adapter for a {@link droid.DrawableResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDrawableResourceAdapter() {
		if (drawableResourceItemProvider == null) {
			drawableResourceItemProvider = new DrawableResourceItemProvider(this);
		}

		return drawableResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.BitmapDrawableResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BitmapDrawableResourceItemProvider bitmapDrawableResourceItemProvider;

	/**
	 * This creates an adapter for a {@link droid.BitmapDrawableResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBitmapDrawableResourceAdapter() {
		if (bitmapDrawableResourceItemProvider == null) {
			bitmapDrawableResourceItemProvider = new BitmapDrawableResourceItemProvider(this);
		}

		return bitmapDrawableResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.TransitionDrawableResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionDrawableResourceItemProvider transitionDrawableResourceItemProvider;

	/**
	 * This creates an adapter for a {@link droid.TransitionDrawableResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionDrawableResourceAdapter() {
		if (transitionDrawableResourceItemProvider == null) {
			transitionDrawableResourceItemProvider = new TransitionDrawableResourceItemProvider(this);
		}

		return transitionDrawableResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.ValueAccess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueAccessItemProvider valueAccessItemProvider;

	/**
	 * This creates an adapter for a {@link droid.ValueAccess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueAccessAdapter() {
		if (valueAccessItemProvider == null) {
			valueAccessItemProvider = new ValueAccessItemProvider(this);
		}

		return valueAccessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.AnyDrawableVA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnyDrawableVAItemProvider anyDrawableVAItemProvider;

	/**
	 * This creates an adapter for a {@link droid.AnyDrawableVA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnyDrawableVAAdapter() {
		if (anyDrawableVAItemProvider == null) {
			anyDrawableVAItemProvider = new AnyDrawableVAItemProvider(this);
		}

		return anyDrawableVAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.StringVA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringVAItemProvider stringVAItemProvider;

	/**
	 * This creates an adapter for a {@link droid.StringVA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringVAAdapter() {
		if (stringVAItemProvider == null) {
			stringVAItemProvider = new StringVAItemProvider(this);
		}

		return stringVAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.IntegerVA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerVAItemProvider integerVAItemProvider;

	/**
	 * This creates an adapter for a {@link droid.IntegerVA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerVAAdapter() {
		if (integerVAItemProvider == null) {
			integerVAItemProvider = new IntegerVAItemProvider(this);
		}

		return integerVAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.BooleanVA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanVAItemProvider booleanVAItemProvider;

	/**
	 * This creates an adapter for a {@link droid.BooleanVA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanVAAdapter() {
		if (booleanVAItemProvider == null) {
			booleanVAItemProvider = new BooleanVAItemProvider(this);
		}

		return booleanVAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.ColorVA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColorVAItemProvider colorVAItemProvider;

	/**
	 * This creates an adapter for a {@link droid.ColorVA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColorVAAdapter() {
		if (colorVAItemProvider == null) {
			colorVAItemProvider = new ColorVAItemProvider(this);
		}

		return colorVAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.DimensionVA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DimensionVAItemProvider dimensionVAItemProvider;

	/**
	 * This creates an adapter for a {@link droid.DimensionVA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDimensionVAAdapter() {
		if (dimensionVAItemProvider == null) {
			dimensionVAItemProvider = new DimensionVAItemProvider(this);
		}

		return dimensionVAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.LayoutDimensionVA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayoutDimensionVAItemProvider layoutDimensionVAItemProvider;

	/**
	 * This creates an adapter for a {@link droid.LayoutDimensionVA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayoutDimensionVAAdapter() {
		if (layoutDimensionVAItemProvider == null) {
			layoutDimensionVAItemProvider = new LayoutDimensionVAItemProvider(this);
		}

		return layoutDimensionVAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.DrawableVA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DrawableVAItemProvider drawableVAItemProvider;

	/**
	 * This creates an adapter for a {@link droid.DrawableVA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDrawableVAAdapter() {
		if (drawableVAItemProvider == null) {
			drawableVAItemProvider = new DrawableVAItemProvider(this);
		}

		return drawableVAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.ResourceAccess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceAccessItemProvider resourceAccessItemProvider;

	/**
	 * This creates an adapter for a {@link droid.ResourceAccess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceAccessAdapter() {
		if (resourceAccessItemProvider == null) {
			resourceAccessItemProvider = new ResourceAccessItemProvider(this);
		}

		return resourceAccessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.StringRA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringRAItemProvider stringRAItemProvider;

	/**
	 * This creates an adapter for a {@link droid.StringRA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringRAAdapter() {
		if (stringRAItemProvider == null) {
			stringRAItemProvider = new StringRAItemProvider(this);
		}

		return stringRAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.IntegerRA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerRAItemProvider integerRAItemProvider;

	/**
	 * This creates an adapter for a {@link droid.IntegerRA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerRAAdapter() {
		if (integerRAItemProvider == null) {
			integerRAItemProvider = new IntegerRAItemProvider(this);
		}

		return integerRAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.BooleanRA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanRAItemProvider booleanRAItemProvider;

	/**
	 * This creates an adapter for a {@link droid.BooleanRA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanRAAdapter() {
		if (booleanRAItemProvider == null) {
			booleanRAItemProvider = new BooleanRAItemProvider(this);
		}

		return booleanRAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.ColorRA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColorRAItemProvider colorRAItemProvider;

	/**
	 * This creates an adapter for a {@link droid.ColorRA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColorRAAdapter() {
		if (colorRAItemProvider == null) {
			colorRAItemProvider = new ColorRAItemProvider(this);
		}

		return colorRAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.DimensionRA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DimensionRAItemProvider dimensionRAItemProvider;

	/**
	 * This creates an adapter for a {@link droid.DimensionRA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDimensionRAAdapter() {
		if (dimensionRAItemProvider == null) {
			dimensionRAItemProvider = new DimensionRAItemProvider(this);
		}

		return dimensionRAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.ArrayRA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayRAItemProvider arrayRAItemProvider;

	/**
	 * This creates an adapter for a {@link droid.ArrayRA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayRAAdapter() {
		if (arrayRAItemProvider == null) {
			arrayRAItemProvider = new ArrayRAItemProvider(this);
		}

		return arrayRAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.DrawableRA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DrawableRAItemProvider drawableRAItemProvider;

	/**
	 * This creates an adapter for a {@link droid.DrawableRA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDrawableRAAdapter() {
		if (drawableRAItemProvider == null) {
			drawableRAItemProvider = new DrawableRAItemProvider(this);
		}

		return drawableRAItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link droid.LayoutProperties} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayoutPropertiesItemProvider layoutPropertiesItemProvider;

	/**
	 * This creates an adapter for a {@link droid.LayoutProperties}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayoutPropertiesAdapter() {
		if (layoutPropertiesItemProvider == null) {
			layoutPropertiesItemProvider = new LayoutPropertiesItemProvider(this);
		}

		return layoutPropertiesItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (applicationItemProvider != null) applicationItemProvider.dispose();
		if (applicationUsesSDKItemProvider != null) applicationUsesSDKItemProvider.dispose();
		if (screenItemProvider != null) screenItemProvider.dispose();
		if (actionItemProvider != null) actionItemProvider.dispose();
		if (goToURLActionItemProvider != null) goToURLActionItemProvider.dispose();
		if (showLayoutActionItemProvider != null) showLayoutActionItemProvider.dispose();
		if (invokeScreenActionItemProvider != null) invokeScreenActionItemProvider.dispose();
		if (layoutItemProvider != null) layoutItemProvider.dispose();
		if (viewCollectionItemProvider != null) viewCollectionItemProvider.dispose();
		if (viewItemProvider != null) viewItemProvider.dispose();
		if (widgetItemProvider != null) widgetItemProvider.dispose();
		if (textViewItemProvider != null) textViewItemProvider.dispose();
		if (buttonItemProvider != null) buttonItemProvider.dispose();
		if (imageViewItemProvider != null) imageViewItemProvider.dispose();
		if (spinnerItemProvider != null) spinnerItemProvider.dispose();
		if (editTextItemProvider != null) editTextItemProvider.dispose();
		if (resourceItemProvider != null) resourceItemProvider.dispose();
		if (stringResourceItemProvider != null) stringResourceItemProvider.dispose();
		if (integerResourceItemProvider != null) integerResourceItemProvider.dispose();
		if (booleanResourceItemProvider != null) booleanResourceItemProvider.dispose();
		if (colorResourceItemProvider != null) colorResourceItemProvider.dispose();
		if (dimensionResourceItemProvider != null) dimensionResourceItemProvider.dispose();
		if (arrayResourceItemProvider != null) arrayResourceItemProvider.dispose();
		if (integerArrayResourceItemProvider != null) integerArrayResourceItemProvider.dispose();
		if (stringArrayResourceItemProvider != null) stringArrayResourceItemProvider.dispose();
		if (drawableResourceItemProvider != null) drawableResourceItemProvider.dispose();
		if (bitmapDrawableResourceItemProvider != null) bitmapDrawableResourceItemProvider.dispose();
		if (transitionDrawableResourceItemProvider != null) transitionDrawableResourceItemProvider.dispose();
		if (valueAccessItemProvider != null) valueAccessItemProvider.dispose();
		if (anyDrawableVAItemProvider != null) anyDrawableVAItemProvider.dispose();
		if (stringVAItemProvider != null) stringVAItemProvider.dispose();
		if (integerVAItemProvider != null) integerVAItemProvider.dispose();
		if (booleanVAItemProvider != null) booleanVAItemProvider.dispose();
		if (colorVAItemProvider != null) colorVAItemProvider.dispose();
		if (dimensionVAItemProvider != null) dimensionVAItemProvider.dispose();
		if (layoutDimensionVAItemProvider != null) layoutDimensionVAItemProvider.dispose();
		if (drawableVAItemProvider != null) drawableVAItemProvider.dispose();
		if (resourceAccessItemProvider != null) resourceAccessItemProvider.dispose();
		if (stringRAItemProvider != null) stringRAItemProvider.dispose();
		if (integerRAItemProvider != null) integerRAItemProvider.dispose();
		if (booleanRAItemProvider != null) booleanRAItemProvider.dispose();
		if (colorRAItemProvider != null) colorRAItemProvider.dispose();
		if (dimensionRAItemProvider != null) dimensionRAItemProvider.dispose();
		if (arrayRAItemProvider != null) arrayRAItemProvider.dispose();
		if (drawableRAItemProvider != null) drawableRAItemProvider.dispose();
		if (layoutPropertiesItemProvider != null) layoutPropertiesItemProvider.dispose();
	}

}
